# RUN: ./compile-and-run-program.sh %s | FileCheck %s
# CHECK: 3

data Int2Ty = Int2Cons (PrimInt PrimInt);

binding i = \() -> Int2Ty { Int2Cons (2 3) };

binding swap = \(x:Int2Ty) -> Int2Ty { case x of
    Int2Cons (x y) -> Int2Cons (y x); };

binding extractIntWrapped = \(x:Int2Ty) -> PrinInt { case x of
    Int2Cons (x y) -> x (); 
};

binding compose = \(f:F g:F x:X) -> F { 
    let 
        binding gx = \(g:F x:X) () -> F { g (x) };
    in f (gx)
};

binding pullapart = \() -> PrimInt { compose (extractIntWrapped swap i) };

binding main = \() -> Void { 
    case pullapart of
        default -> printInt ();
};
