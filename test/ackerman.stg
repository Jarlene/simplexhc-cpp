# RUN: %loadSimplexhc %s  --jit | FileCheck %s
# CHECK: 11
#
# ack :: Int -> Int -> Int
# ack 0 n = n+1
# ack m 0 = ack (m - 1) 1
# ack m n = ack (m - 1) (ack m (n - 1))

data Int  = IntCons (PrimInt);

binding sub = \(int_i: () -> Int, int_j: () -> Int) -> Int {
    case int_i () of
        IntCons (iprim) -> case int_j () of
                                IntCons(jprim) -> case primSubtract (iprim jprim) of
                                                    r -> IntCons (r);;;

};


binding add = \(int_i2: () -> Int, int_j2: () -> Int) -> Int {
    case int_i2 () of
        IntCons (iprim2) -> case int_j2 () of
                                IntCons(jprim2) -> case primAdd (iprim2 jprim2) of
                                                    r -> IntCons (r);;;

};

binding zero = \() -> Int { IntCons (0) };
binding one = \() -> Int { IntCons (1) };
binding two = \() -> Int { IntCons (2) };
binding three = \() -> Int { IntCons (3) };
binding four = \() -> Int { IntCons (4) };
binding five = \() -> Int { IntCons (5) };
binding eleven = \() -> Int { IntCons (11) };

binding ackerman = \(aint: () -> Int, bint: () -> Int) -> Int {
    case aint () of
        IntCons (aprim) -> case aprim () of
                            0 -> add (bint one);
                            aval -> case bint () of
                                        IntCons (bprim) -> case bprim () of
                                                                0 -> let
                                                                        binding adec = \(aint: () -> Int) () -> Int { sub (aint one) };
                                                                     in ackerman (adec one);
                                                                bval -> let
                                                                            binding bdec = \(bint: () -> Int) () -> Int { sub (bint one) };
                                                                            binding adec = \(aint: () -> Int) () -> Int { sub (aint one) };
                                                                            binding bnew = \(aint: () -> Int, bdec: Boxed) () -> Int { ackerman (aint bdec) };
                                                                        in ackerman (adec bnew);;;;
};


binding main = \() -> Boxed { 
    case ackerman (two four) of
        IntCons (x) -> printInt (x); 
};
